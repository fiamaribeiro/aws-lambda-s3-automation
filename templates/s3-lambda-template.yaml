
AWSTemplateFormatVersion: '2010-09-09'
Description: >
  S3 -> Lambda automation (event-driven). Creates: S3 bucket, IAM role, Lambda function,
  permission for S3 to invoke Lambda, and bucket notification for object-created events.

Parameters:
  BucketName:
    Type: String
    Description: Name of the source S3 bucket that triggers the Lambda
  LambdaFunctionName:
    Type: String
    Default: lambda-s3-automation
    Description: Name for the Lambda function
  Runtime:
    Type: String
    Default: python3.11
    AllowedValues:
      - python3.11
      - python3.10
      - python3.9
    Description: Lambda runtime
  S3EventPrefix:
    Type: String
    Default: ""
    Description: Optional object key prefix for filtering (e.g., 'incoming/')
  S3EventSuffix:
    Type: String
    Default: ""
    Description: Optional object key suffix for filtering (e.g., '.csv')
  MemorySize:
    Type: Number
    Default: 256
    MinValue: 128
    MaxValue: 10240
    Description: Lambda memory (MB)
  TimeoutSeconds:
    Type: Number
    Default: 30
    MinValue: 3
    MaxValue: 900
    Description: Lambda timeout in seconds

Resources:
  SourceBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: "s3:ObjectCreated:*"
            Function: !GetAtt ProcessorFunction.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: !Ref S3EventPrefix
                  - Name: suffix
                    Value: !Ref S3EventSuffix
    DependsOn:
      - LambdaInvokePermission

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${LambdaFunctionName}-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3ReadAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub "arn:aws:s3:::${BucketName}"
                  - !Sub "arn:aws:s3:::${BucketName}/*"

  ProcessorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref LambdaFunctionName
      Description: Processes S3 object-created events
      Runtime: !Ref Runtime
      Handler: index.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Timeout: !Ref TimeoutSeconds
      MemorySize: !Ref MemorySize
      Environment:
        Variables:
          LOG_SAMPLE: "true"
      Code:
        ZipFile: |
          import json, os, urllib.parse, boto3, logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          s3 = boto3.client('s3')

          def lambda_handler(event, context):
              logger.info("Event: %s", json.dumps(event))
              record = event['Records'][0]
              bucket = record['s3']['bucket']['name']
              key = urllib.parse.unquote_plus(record['s3']['object']['key'], encoding='utf-8')
              size = record['s3']['object'].get('size', 'unknown')
              # Optional: read a small text file example (avoid big files)
              content_preview = ""
              try:
                  if key.lower().endswith(('.txt', '.csv', '.json')) and int(size) < 5_000_000:
                      obj = s3.get_object(Bucket=bucket, Key=key)
                      body = obj['Body'].read(500).decode('utf-8', errors='replace')
                      content_preview = body
              except Exception as e:
                  logger.warning("Could not preview file content: %s", e)

              result = {
                  "bucket": bucket,
                  "key": key,
                  "size": size,
                  "preview": content_preview[:200]
              }
              logger.info("Processed: %s", json.dumps(result))
              return {"statusCode": 200, "body": json.dumps(result)}

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ProcessorFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub "arn:aws:s3:::${BucketName}"

Outputs:
  SourceBucketName:
    Value: !Ref BucketName
    Description: Name of the source S3 bucket
  LambdaFunctionArn:
    Value: !GetAtt ProcessorFunction.Arn
    Description: ARN of the Lambda function
